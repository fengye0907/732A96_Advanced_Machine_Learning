########### lab2 ######################
knitr::opts_chunk$set(echo = TRUE, out.height = "200px")
rm(list=ls())
library(kableExtra)
library(HMM)
library(entropy)
########### lab2q1 ######################
# state Z: sector the robot might locate
sta <- strsplit("abcdefghij","")[[1]]
# observation x: sector the device reports
sym <- sta
# transition probability matrix
A <- matrix(0, nrow = 10, ncol = 10, dimnames = list(sta,sta))
# possible locations the device reports with different states
B <- matrix(0, nrow = 10, ncol = 10, dimnames = list(sta,sta))
for (i in 1:10) {
f <- function(i){ifelse(i%%10==0,10,i%%10)}
A[i,i] <- 0.5
A[i,f(i+1)] <- 0.5
B[i,f(i-2)] <- 0.2
B[i,f(i-1)] <- 0.2
B[i,f(i)] <- 0.2
B[i,f(i+1)] <- 0.2
B[i,f(i+2)] <- 0.2
}
hmm <- initHMM(States = sta, Symbols = sym,
transProbs = A,
emissionProbs = B)
cat("The transition probability:")
kable(A) %>%
kable_styling(latex_options="basic")
cat("The emission probability:")
kable(B) %>%
kable_styling(latex_options="basic")
########### lab2q2 ######################
set.seed(12345)
n <- 100
res <- simHMM(hmm, n)
states <- res$states
observation <- res$observation
res
aaaa <- forward(hmm, observation)
observation
fprob <- exp(forward(hmm, observation))
fprob[,1]
hmm
aaaa
a <- (0,0,0,0,0.2,0.2,0.2,0.2,0)
a <- c(0,0,0,0,0.2,0.2,0.2,0.2,0)
a <- c(0,a)
a
a <- c(0,0,0,0,0.2,0.2,0.2,0.2,0.2,0)
a0 <-rep(1,10)
a0
a0 %*% B
B
B %*% a0
a0 <-c(0,0,0,0,0,0,1,0,0,0)
B %*% a0
alpha <- B %*% a0
A %*% alpha
fprob[,1]
fprob[,2]
observation
a0
alpha
a1 <- c(0,0,0,0,0,0,0,0,0,1)
alpha
alpha %*% a1
alpha %*% t(a1)
alpha
a1
alpha
alpha
alpha %*% A[,10]
A[,10]
alpha %*% A[,10]
alpha * A[,10]
observation[1:2]
alpha * A[10,]
alpha %*% A[10,]
A
pi <- rep(1,10)
pi
pi %*% B
B
pi * B[,7]
alpha=pi * B[,7]
alpha %*% A
alpha %*% A %*% B[,10]
alpha %*% A * B[,10]
alpha %*% A * B[,10] %*% A * B[,8]
alpha %*% A * B[,10] %*% A * B[,8] %*% A * B[,10]
View(fprob)
alpha
A %*% alpha
A %*% alpha *B[,10]
alpha%*% A *B[,10]
alpha%*% A *B[,10] - > alpha2
alpha%*% A *B[,10] -> alpha2
alpha
alpha2
alpha2 %*% A * B[,8]
########### lab2q3 ######################
## the probabilities are in log transformation
# column: probabilities of locations in all sectors
# row: time
# forward algorithm example
# observation: g,j,h,j... -> 7, 10, 8, 10...
# alpha1 <- rep(1,10) * B[,7]
# alpha2 <- alpha1 %*% A * B[,10]
# alpha3 <- alpha2 %*% A * B[,8]
# ...
fprob <- exp(forward(hmm, observation))
bprob <- exp(backward(hmm, observation))
filtering <- prop.table(fprob,2)             # t(t(fprob)/colSums(fprob))
smoothing <- prop.table(fprob*bprob,2)    #  posterior(hmm, observation)
# get the most possible of path might hav multiple maximumal probabilites
# so we use list to save
fpath <- lapply(1:n, function(i){
col <- filtering[,i]
idx <- which.max(col)
if(sum(col==max(col))>1){
sta[col==max(col)]
}else{
sta[idx]
}
})
spath <- lapply(1:n, function(i){
col <- smoothing[,i]
idx <- which.max(col)
if(sum(col==max(col))>1){
sta[col==max(col)]
}else{
sta[idx]
}
})
# viterbi algorithm -- find the path
vpath <- viterbi(hmm, observation)
vpath
observation
alpha
alpha2
pi
pi %*% B[,7]
pi * B[,7]
pi * B[,7] %*% A
pi * B[,7] %*% A * B[,10]
alpha2
which.max(pi * B[,7] %*% A)
which.max(pi * B[,7] %*% A) * B[,10]
which.max(pi * B[,7])
which.max(pi * B[,7]) * A[5,10]
5 * A[5,10]
A[5,10]
pi * B[,7]
pi * B[,7] *A
pi * B[,7] %*% A
alpha1 <- rep(1,10) * B[,7]
alpha2 <- alpha1 %*% A * B[,10]
alpha3 <- alpha2 %*% A * B[,8]
alpha1
alpha2
alpha3
A=matrix(c(0.5, 0.2,0.3,0.3,0.5,0.2,0.2,0.3,0.5), byrow = T, nrow=3)
A
b=matrix(c(0.5,0.5,0.4,0.4,0.7,0.3),byrow=T, nrow=2)
b=matrix(c(0.5,0.5,0.4,0.4,0.7,0.3),byrow=T, nrow=3)
B=matrix(c(0.5,0.5,0.4,0.4,0.7,0.3),byrow=T, nrow=3)
A
B
B=matrix(c(0.5,0.5,0.4,0.6,0.7,0.3),byrow=T, nrow=3)
B
pi=c(0.2,0.4,0.4)
pi * B[,1]
alpha1 <- pi * B[,1]
alpha1 %*% A
A
A %*% alpha1
alpha1
which.max(alpha1)
alpha1[3] * A[3,]
alpha1[3] * A[,3]
alpha1[3] %*% A[,3]
alpha1[3] %*% A[3,]
alpha1[3] %*% A[3,] * B[,2]
alpha1 <- pi * B[,1]
alpha1
alpha2 <- alpha1 %*% A * B[,2]
alpha2
alpha3 <- alpha2 %*% A * B[,1]
alpha3
alpha1
j <- which.max(alpha1)
alpha2 <- alpha1[j] %*% A[j,] * B[,2]
alpha2
j <- which.max(alpha2)
alpha3 <- alpha2[j] %*% A[j,] * B[,1]
alpha3
# viterbi algorithm example
alpha1 <- pi * B[,1]
j <- which.max(alpha1)
alpha2 <- alpha1[j] %*% A[j,] * B[,2]
j <- which.max(alpha2)
alpha2
# viterbi algorithm example
alpha1 <- pi * B[,1]
j <- which.max(alpha1)
alpha2 <- alpha1[j] %*% A[j,] * B[,2]
j <- which.max(alpha2)
alpha2[3] %*% A[3,] * B[,1]
alpha2[2] %*% A[2,] * B[,1]
# viterbi algorithm example
alpha1 <- pi * B[,1]
j <- which.max(alpha1)
alpha2 <- alpha1[j] %*% A[j,] * B[,2]
j <- which.max(alpha2)
alpha3 <- alpha2[j] %*% A[j,] * B[,1]
alpha2
alpha3
alpha1[j] %*% A[j,] * B[,2]
max(alpha1[j] %*% A[j,] * B[,2])
j=1
max(alpha1[j] %*% A[j,] * B[,2])
j=2
max(alpha1[j] %*% A[j,] * B[,2])
j=3
max(alpha1[j] %*% A[j,] * B[,2])
j <- which.max(alpha1)
i=1
max(alpha1[j] %*% A[j,] * B[,2])
i=2
max(alpha1[j] %*% A[j,] * B[,2])
i=2
max(alpha1[j] %*% A[i,] * B[,2])
i=1
max(alpha1[j] %*% A[i,] * B[,2])
# forward algorithm example
gamma1 <- pi * B[,1]
gamma1
gamma1 %*% A
max(gamma1[j] %*% A[j,]) * B[,2]
max(gamma1[j] %*% A[j,])
j=3
max(gamma1[j] %*% A[j,])
gamma1%*% A[,1]
gamma1 * A[,1]
max(gamma1 * A[,1])
max(gamma1 * A[,1]) %*% B[,2]
max(gamma1 * A[,1]) %*% B[1,2]
max(gamma1 * A[,2]) %*% B[2,2]
max(gamma1 * A[,3]) %*% B[3,2]
gamma1 * A
apply(gamma1*A, MARGIN = 2, FUN=max)
apply(gamma1*A, MARGIN = 2, FUN=max) %*% B[,2]
apply(gamma1*A, MARGIN = 2, FUN=max) * B[,2]
gamma1 * A
phi1=max(gamma1 * A[,1])
phi2=max(gamma1 * A[,2])
phi3=max(gamma1 * A[,3])
phi1
gamma2 <- apply(gamma1*A, 2, max) * B[,2]
gamma2
apply(gamma1*A, 2, max) * B[1,2]
apply(gamma1*A, 2, max) * B[,2]
apply(gamma1*A, 2, max) * B[1,2]
apply(gamma1*A, 2, max) * B[3,2]
apply(gamma1*A, 2, max)
phi1=which.max(gamma1 * A[,1])  # 3
phi2=which.max(gamma1 * A[,2])  # 3
phi3=which.max(gamma1 * A[,3])  # 2
phi1=which.max(gamma1 * A[,1])  # 3
phi2=which.max(gamma1 * A[,2])  # 3
phi3=which.max(gamma1 * A[,3])  # 2
gamma1 * A[,3]
gamma1 * A[1,]
which.max(gamma1 * A[1,])
(gamma1 * A[1,])[which.max(gamma1 * A[1,])]
(gamma1 * A[1,])
phi21=[which.max(gamma1 * A[1,])]
phi21=which.max(gamma1 * A[1,])
gamma21=(gamma1 * A[1,])[phi1] * B[phi21,2]
phi21=which.max(gamma1 * A[,1])
gamma21=(gamma1 * A[,1])[phi1] * B[phi21,2]
gamma1 * A[,1]
phi21=which.max(gamma1 * A[,1])
phi21
gamma21=(gamma1 * A[,1])[phi21] * B[phi21,2]
phi22=which.max(gamma1 * A[,2]) # 3
gamma21=(gamma1 * A[,2])[phi22] * B[2,2]  # 前一个用最大可能变成1的概率 * 下一个1抽B2的概率
gamma21=(gamma1 * A[,1])[phi21] * B[1,2]  # 前一个用最大可能变成1的概率 * 下一个1抽B2的概率
phi22=which.max(gamma1 * A[,2]) # 3
gamma22=(gamma1 * A[,2])[phi22] * B[2,2]  # 前一个用最大可能变成1的概率 * 下一个1抽B2的概率
phi23=which.max(gamma1 * A[,3]) # 3
gamma23=(gamma1 * A[,3])[phi23] * B[3,2]
phi31=which.max(gamma2 * A[,1]) # 3
gamma31=(gamma1 * A[,1])[phi31] * B[1,2]  # 前一个用最大可能变成1的概率 * 下一个1抽B2的概率
gamma31=(gamma2 * A[,1])[phi31] * B[1,2]  # 前一个用最大可能变成1的概率 * 下一个1抽B2的概率
phi32=which.max(gamma2 * A[,2]) # 3
gamma32=(gamma2 * A[,2])[phi32] * B[2,2]  # 前一个用最大可能变成2的概率 * 下一个2抽B2的概率
phi33=which.max(gamma2 * A[,3]) # 3
gamma33=(gamma2 * A[,3])[phi33] * B[3,2]
phi31=which.max(gamma2 * A[,1]) # 2
gamma31=(gamma2 * A[,1])[phi31] * B[1,1]  # 前一个用最大可能变成1的概率 * 下一个1抽B2的概率
phi32=which.max(gamma2 * A[,2]) # 2
gamma32=(gamma2 * A[,2])[phi32] * B[2,1]  # 前一个用最大可能变成2的概率 * 下一个2抽B2的概率
phi33=which.max(gamma2 * A[,3]) # 3
gamma33=(gamma2 * A[,3])[phi33] * B[3,1]
max(gamma31, gamma32, gamma33)
which.max(gamma31, gamma32, gamma33)
which.max(gamma31, gamma32, gamma33)
which.max(c(gamma31, gamma32, gamma33))
phi=matrix(c(3,3,3,2,2,3),byrow = T, nrow=3   )
phi
b=c(1,2,1)
phi=matrix(nrow=3,ncol=2)
gamma1 <- pi * B[,b[1]]
gamma <- matrix(nrow=3, ncol=3)
gamma[,1] <- pi * B[,b[1]]
gamma
phi[,i] <- apply(gamma[,i]*A, 2, which.max)
i
phi
gamma[,i+1] <- apply(gamma[,i]*A, 2, max)
gamma
gamma[,i+1] <- apply(gamma[,i]*A, 2, max) * B[,b[2]]
gamma
b=c(1,2,1)
phi=matrix(nrow=3,ncol=2)
gamma <- matrix(nrow=3, ncol=3)
gamma[,1] <- pi * B[,b[1]]
for (i in 1:2) {
phi[,i] <- apply(gamma[,i]*A, 2, which.max)
gamma[,i+1] <- apply(gamma[,i]*A, 2, max) * B[,b[i+1]]
}
phi
gamma
vpath <- matrix(ncol=3)
vpath[3] <- which.max(gamma[,3])
3:2
3:1
phi[vpath[i+1],i]
vpath <- matrix(ncol=3)
vpath[3] <- which.max(gamma[,3])
for(i in 2:1){
vpath[3-i] <- phi[vpath[i+1],i]
}
vpath <- matrix(ncol=3)
vpath[3] <- which.max(gamma[,3])
for(i in 2:1){
vpath[i] <- phi[vpath[i+1],i]
}
########### lab2 ######################
knitr::opts_chunk$set(echo = TRUE, out.height = "200px")
rm(list=ls())
library(kableExtra)
library(HMM)
library(entropy)
########### lab2q1 ######################
# state Z: sector the robot might locate
sta <- strsplit("abcdefghij","")[[1]]
# observation x: sector the device reports
sym <- sta
# transition probability matrix
A <- matrix(0, nrow = 10, ncol = 10, dimnames = list(sta,sta))
# possible locations the device reports with different states
B <- matrix(0, nrow = 10, ncol = 10, dimnames = list(sta,sta))
for (i in 1:10) {
f <- function(i){ifelse(i%%10==0,10,i%%10)}
A[i,i] <- 0.5
A[i,f(i+1)] <- 0.5
B[i,f(i-2)] <- 0.2
B[i,f(i-1)] <- 0.2
B[i,f(i)] <- 0.2
B[i,f(i+1)] <- 0.2
B[i,f(i+2)] <- 0.2
}
hmm <- initHMM(States = sta, Symbols = sym,
transProbs = A,
emissionProbs = B)
########### lab2q2 ######################
set.seed(12345)
n <- 100
res <- simHMM(hmm, n)
states <- res$states
observation <- res$observation
res
install.packages("TinyTex")
install.packages("rticles")
devtools::install_github('yihui/tinytex')
tinytex::install_tinytex()
install.packages("devtools")
devtools::install_github('yihui/tinytex')
