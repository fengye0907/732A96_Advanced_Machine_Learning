}
general_rate <- as.data.frame(colMeans(rate))
colnames(general_rate) <- "Mean"
kable(general_rate) %>%        # knitr::kable(general_rate)
kable_styling(latex_options="basic")
########### lab2q6 ######################
set.seed(12345)
df <- as.data.frame(matrix(nrow = 10, ncol = 3))
len <- seq(100,1000,100)
for(i in 1:10){
N <- len[i]
res <- simHMM(hmm, N)
states <- res$states
observation <- res$observation
fprob <- exp(forward(hmm, observation))
bprob <- exp(backward(hmm, observation))
filtering <-  prop.table(fprob,2)
smoothing <- prop.table(fprob*bprob,2)
vpath <- viterbi(hmm, observation)
new_rate <- data.frame(filtering_accuracy=get_accuracy(sta, filtering, states),
smoothing_accuracy=get_accuracy(sta, smoothing, states))
viterbi_accuracy <- prop.table(table(vpath==states))[2]
new_rate <- cbind(new_rate, viterbi_accuracy)
df[i,] <- new_rate
}
plot(len,df[,1], type="l", col="Red", ylim = c(0,1),xlab="series length",ylab="accuracy")
lines(len,df[,2], col="Blue")
lines(len,df[,3], col="Green")
legend(700,1,legend=c("filtering","smoothing","viterbi"), col=c("red","blue","green"),lty=1)
# to be simple, we ignore multple maximumal probabilites
set.seed(12345)
ent <- c()
for(N in seq(10, 200, 10)){
fprob <- exp(forward(hmm, observation[1:N ]))
filtering <-  prop.table(fprob,2)
fpath <- sapply(1:N, function(k){
col <- filtering[,k]
idx <- sta[which.max(col)]
idx
})
ent <- c(ent, (entropy.empirical(table(fpath))))
}
plot(seq(10, 200, 10), ent, xlab="seris length", ylab="entropy",
type="l", main="Entropies based on the same simulation with diff. lengths")
filtering
dim(filtering)
sapply(smoothing, entropy)
smoothing[,1]
########### lab2 ######################
knitr::opts_chunk$set(echo = TRUE, out.height = "200px")
rm(list=ls())
library(kableExtra)
library(HMM)
library(entropy)
########### lab2q1 ######################
# state Z: sector the robot might locate
sta <- strsplit("abcdefghij","")[[1]]
# observation x: sector the device reports
sym <- sta
# transition probability matrix
A <- matrix(0, nrow = 10, ncol = 10, dimnames = list(sta,sta))
# possible locations the device reports with different states
B <- matrix(0, nrow = 10, ncol = 10, dimnames = list(sta,sta))
for (i in 1:10) {
f <- function(i){ifelse(i%%10==0,10,i%%10)}
A[i,i] <- 0.5
A[i,f(i+1)] <- 0.5
B[i,f(i-2)] <- 0.2
B[i,f(i-1)] <- 0.2
B[i,f(i)] <- 0.2
B[i,f(i+1)] <- 0.2
B[i,f(i+2)] <- 0.2
}
hmm <- initHMM(States = sta, Symbols = sym,
transProbs = A,
emissionProbs = B)
cat("The transition probability:")
kable(A) %>%
kable_styling(latex_options="basic")
cat("The emission probability:")
kable(B) %>%
kable_styling(latex_options="basic")
########### lab2q2 ######################
set.seed(12345)
n <- 100
res <- simHMM(hmm, n)
states <- res$states
observation <- res$observation
res
########### lab2q3 ######################
## the probabilities are in log transformation
# column: probabilities of locations in all sectors
# row: time
fprob <- exp(forward(hmm, observation))
bprob <- exp(backward(hmm, observation))
filtering <- prop.table(fprob,2)             # t(t(fprob)/colSums(fprob))
smoothing <- prop.table(fprob*bprob,2)    #  posterior(hmm, observation)
# get the most possible of path might hav multiple maximumal probabilites
# so we use list to save
fpath <- lapply(1:n, function(i){
col <- filtering[,i]
idx <- which.max(col)
if(sum(col==max(col))>1){
sta[col==max(col)]
}else{
sta[idx]
}
})
spath <- lapply(1:n, function(i){
col <- smoothing[,i]
idx <- which.max(col)
if(sum(col==max(col))>1){
sta[col==max(col)]
}else{
sta[idx]
}
})
# viterbi algorithm -- find the path
vpath <- viterbi(hmm, observation)
########### lab2q4 ######################
# sta: all possible states
get_accuracy <- function(sta, path, states){
n <- length(states)
right <- 0
for(i in 1:n){
f <- path[,i]
fmax <- sta[f==max(f)]
if(states[i]%in%fmax){ # may hav multiple maximumal probabilites
right <- right + 1
}
}
return(right/n)
}
rate <- data.frame(filtering_accuracy=get_accuracy(sta, filtering, states),
smoothing_accuracy=get_accuracy(sta, smoothing, states))
viterbi_accuracy <- prop.table(table(vpath==states))[2]
rate <- cbind(rate, viterbi_accuracy)
cat("the accuracy of filtered path is", rate$filtering_accuracy,"\n")
cat("the accuracy of smoothed path is", rate$smoothing_accuracy,"\n")
cat("the accuracy of viterbi path is", rate$viterbi_accuracy,"\n")
########### lab2q5 ######################
## the iteration number cannot be too much, otherwise we
## get 0 in the final iteration.
for (i in 1:50) {
res <- simHMM(hmm, n)
states <- res$states
observation <- res$observation
fprob <- exp(forward(hmm, observation))
bprob <- exp(backward(hmm, observation))
filtering <-  prop.table(fprob,2)
smoothing <- prop.table(fprob*bprob,2)
new_rate <- data.frame(filtering_accuracy=get_accuracy(sta, filtering, states),
smoothing_accuracy=get_accuracy(sta, smoothing, states))
vpath <- viterbi(hmm, observation)
viterbi_accuracy <- prop.table(table(vpath==states))[2]
new_rate <- cbind(new_rate, viterbi_accuracy)
rate <- rbind(rate, new_rate)
}
general_rate <- as.data.frame(colMeans(rate))
colnames(general_rate) <- "Mean"
kable(general_rate) %>%        # knitr::kable(general_rate)
kable_styling(latex_options="basic")
########### lab2q6 ######################
set.seed(12345)
df <- as.data.frame(matrix(nrow = 10, ncol = 3))
len <- seq(100,1000,100)
for(i in 1:10){
N <- len[i]
res <- simHMM(hmm, N)
states <- res$states
observation <- res$observation
fprob <- exp(forward(hmm, observation))
bprob <- exp(backward(hmm, observation))
filtering <-  prop.table(fprob,2)
smoothing <- prop.table(fprob*bprob,2)
vpath <- viterbi(hmm, observation)
new_rate <- data.frame(filtering_accuracy=get_accuracy(sta, filtering, states),
smoothing_accuracy=get_accuracy(sta, smoothing, states))
viterbi_accuracy <- prop.table(table(vpath==states))[2]
new_rate <- cbind(new_rate, viterbi_accuracy)
df[i,] <- new_rate
}
plot(len,df[,1], type="l", col="Red", ylim = c(0,1),xlab="series length",ylab="accuracy")
lines(len,df[,2], col="Blue")
lines(len,df[,3], col="Green")
legend(700,1,legend=c("filtering","smoothing","viterbi"), col=c("red","blue","green"),lty=1)
fprob
fprob <- exp(forward(hmm, observation))
fprob
dim(fprob)
########### lab2 ######################
knitr::opts_chunk$set(echo = TRUE, out.height = "200px")
rm(list=ls())
library(kableExtra)
library(HMM)
library(entropy)
########### lab2q1 ######################
# state Z: sector the robot might locate
sta <- strsplit("abcdefghij","")[[1]]
# observation x: sector the device reports
sym <- sta
# transition probability matrix
A <- matrix(0, nrow = 10, ncol = 10, dimnames = list(sta,sta))
# possible locations the device reports with different states
B <- matrix(0, nrow = 10, ncol = 10, dimnames = list(sta,sta))
for (i in 1:10) {
f <- function(i){ifelse(i%%10==0,10,i%%10)}
A[i,i] <- 0.5
A[i,f(i+1)] <- 0.5
B[i,f(i-2)] <- 0.2
B[i,f(i-1)] <- 0.2
B[i,f(i)] <- 0.2
B[i,f(i+1)] <- 0.2
B[i,f(i+2)] <- 0.2
}
hmm <- initHMM(States = sta, Symbols = sym,
transProbs = A,
emissionProbs = B)
cat("The transition probability:")
kable(A) %>%
kable_styling(latex_options="basic")
cat("The emission probability:")
kable(B) %>%
kable_styling(latex_options="basic")
########### lab2q2 ######################
set.seed(12345)
n <- 100
res <- simHMM(hmm, n)
states <- res$states
observation <- res$observation
res
fprob <- exp(forward(hmm, observation))
fprob
fprob[,1]
sum(fprob[,1])
fprob <- prop.table(exp(forward(hmm, observation)),2)
fprob[,100]
fprob[,1]
ent <- sapply(fprob, entropy.empirical)
plot(ent)
ent
entropy.empirical(fprob[,1])
entropy.empirical(fprob[,2])
ent <- apply(X = fprob, MARGIN = 2, FUN = entropy.empirical)
ent
plot(ent)
sprob <- prop.table(exp(forward(hmm, observation)),2)
sent <- apply(X = sprob, MARGIN = 2, FUN = entropy.empirical)
frob <- prop.table(exp(posterior(hmm, observation)),2)
fent <- apply(X = fprob, MARGIN = 2, FUN = entropy.empirical)
plot(sent, type="l")
plot(sent, type="l",col="Red")
plot(sent, type="l",col="Red")
lines(fent, col="Blue")
plot(sent, type="l",col="Red")
lines(fent, col="Blue")
sprob <- prop.table(exp(forward(hmm, observation)),2)
sent <- apply(X = sprob, MARGIN = 2, FUN = entropy.empirical)
frob <- prop.table(exp(posterior(hmm, observation)),2)
fent <- apply(X = fprob, MARGIN = 2, FUN = entropy.empirical)
all.equal(sent, fent)
sprob <- prop.table(exp(forward(hmm, observation)),2)
sent <- apply(X = sprob, MARGIN = 2, FUN = entropy.empirical)
fprob <- prop.table(exp(posterior(hmm, observation)),2)
fent <- apply(X = fprob, MARGIN = 2, FUN = entropy.empirical)
plot(sent, type="l",col="Red")
lines(fent, col="Blue")
all.equal(sprob, fprob)
lines(fent, col="Blue")
all.equal(sent, fent)
sprob <- prop.table(exp(forward(hmm, observation)),2)
sent <- apply(X = sprob, MARGIN = 2, FUN = entropy.empirical)
fprob <- prop.table(exp(posterior(hmm, observation)),2)
fent <- apply(X = fprob, MARGIN = 2, FUN = entropy.empirical)
plot(sent, type="l",col="Red")
lines(fent, col="Blue")
sprob <- prop.table(exp(forward(hmm, observation)),2)
sent <- apply(X = sprob, MARGIN = 2, FUN = entropy.empirical)
fprob <- prop.table(exp(posterior(hmm, observation)),2)
fent <- apply(X = fprob, MARGIN = 2, FUN = entropy.empirical)
plot(sent, type="l",col="Red")
lines(fent, col="Blue")
all.equal(sent,fent)
plot(sent)
plot(fent)
plot(sent)
plot(sent)
plot(fent)
plot(sent, type="l",col="Red", ylim=c(0,3))
lines(fent, col="Blue")
plot(sent, type="l",col="Red", ylim=c(0,3))
lines(fent, col="Blue")
sprob <- prop.table(exp(forward(hmm, observation)),2)
sent <- apply(X = sprob, MARGIN = 2, FUN = entropy.empirical)
fprob <- prop.table(exp(backward(hmm, observation)),2)
fent <- apply(X = fprob, MARGIN = 2, FUN = entropy.empirical)
plot(sent, type="l",col="Red", ylim=c(0,3))
lines(fent, col="Blue")
########### lab2 ######################
knitr::opts_chunk$set(echo = TRUE, out.height = "200px")
rm(list=ls())
library(kableExtra)
library(HMM)
library(entropy)
########### lab2q1 ######################
# state Z: sector the robot might locate
sta <- strsplit("abcdefghij","")[[1]]
# observation x: sector the device reports
sym <- sta
# transition probability matrix
A <- matrix(0, nrow = 10, ncol = 10, dimnames = list(sta,sta))
# possible locations the device reports with different states
B <- matrix(0, nrow = 10, ncol = 10, dimnames = list(sta,sta))
for (i in 1:10) {
f <- function(i){ifelse(i%%10==0,10,i%%10)}
A[i,i] <- 0.5
A[i,f(i+1)] <- 0.5
B[i,f(i-2)] <- 0.2
B[i,f(i-1)] <- 0.2
B[i,f(i)] <- 0.2
B[i,f(i+1)] <- 0.2
B[i,f(i+2)] <- 0.2
}
hmm <- initHMM(States = sta, Symbols = sym,
transProbs = A,
emissionProbs = B)
cat("The transition probability:")
kable(A) %>%
kable_styling(latex_options="basic")
cat("The emission probability:")
kable(B) %>%
kable_styling(latex_options="basic")
########### lab2q2 ######################
set.seed(12345)
n <- 100
res <- simHMM(hmm, n)
states <- res$states
observation <- res$observation
res
########### lab2q3 ######################
## the probabilities are in log transformation
# column: probabilities of locations in all sectors
# row: time
fprob <- exp(forward(hmm, observation))
bprob <- exp(backward(hmm, observation))
filtering <- prop.table(fprob,2)             # t(t(fprob)/colSums(fprob))
smoothing <- prop.table(fprob*bprob,2)    #  posterior(hmm, observation)
# get the most possible of path might hav multiple maximumal probabilites
# so we use list to save
fpath <- lapply(1:n, function(i){
col <- filtering[,i]
idx <- which.max(col)
if(sum(col==max(col))>1){
sta[col==max(col)]
}else{
sta[idx]
}
})
spath <- lapply(1:n, function(i){
col <- smoothing[,i]
idx <- which.max(col)
if(sum(col==max(col))>1){
sta[col==max(col)]
}else{
sta[idx]
}
})
# viterbi algorithm -- find the path
vpath <- viterbi(hmm, observation)
########### lab2q4 ######################
# sta: all possible states
get_accuracy <- function(sta, path, states){
n <- length(states)
right <- 0
for(i in 1:n){
f <- path[,i]
fmax <- sta[f==max(f)]
if(states[i]%in%fmax){ # may hav multiple maximumal probabilites
right <- right + 1
}
}
return(right/n)
}
rate <- data.frame(filtering_accuracy=get_accuracy(sta, filtering, states),
smoothing_accuracy=get_accuracy(sta, smoothing, states))
viterbi_accuracy <- prop.table(table(vpath==states))[2]
rate <- cbind(rate, viterbi_accuracy)
cat("the accuracy of filtered path is", rate$filtering_accuracy,"\n")
cat("the accuracy of smoothed path is", rate$smoothing_accuracy,"\n")
cat("the accuracy of viterbi path is", rate$viterbi_accuracy,"\n")
########### lab2q5 ######################
## the iteration number cannot be too much, otherwise we
## get 0 in the final iteration.
for (i in 1:50) {
res <- simHMM(hmm, n)
states <- res$states
observation <- res$observation
fprob <- exp(forward(hmm, observation))
bprob <- exp(backward(hmm, observation))
filtering <-  prop.table(fprob,2)
smoothing <- prop.table(fprob*bprob,2)
new_rate <- data.frame(filtering_accuracy=get_accuracy(sta, filtering, states),
smoothing_accuracy=get_accuracy(sta, smoothing, states))
vpath <- viterbi(hmm, observation)
viterbi_accuracy <- prop.table(table(vpath==states))[2]
new_rate <- cbind(new_rate, viterbi_accuracy)
rate <- rbind(rate, new_rate)
}
general_rate <- as.data.frame(colMeans(rate))
colnames(general_rate) <- "Mean"
kable(general_rate) %>%        # knitr::kable(general_rate)
kable_styling(latex_options="basic")
########### lab2q6 ######################
set.seed(12345)
df <- as.data.frame(matrix(nrow = 10, ncol = 3))
len <- seq(100,1000,100)
for(i in 1:10){
N <- len[i]
res <- simHMM(hmm, N)
states <- res$states
observation <- res$observation
fprob <- exp(forward(hmm, observation))
bprob <- exp(backward(hmm, observation))
filtering <-  prop.table(fprob,2)
smoothing <- prop.table(fprob*bprob,2)
vpath <- viterbi(hmm, observation)
new_rate <- data.frame(filtering_accuracy=get_accuracy(sta, filtering, states),
smoothing_accuracy=get_accuracy(sta, smoothing, states))
viterbi_accuracy <- prop.table(table(vpath==states))[2]
new_rate <- cbind(new_rate, viterbi_accuracy)
df[i,] <- new_rate
}
filtering
plot(sent, type="l",col="Red",)
sprob <- prop.table(exp(forward(hmm, observation)),2)
sent <- apply(X = sprob, MARGIN = 2, FUN = entropy.empirical)
plot(sent, type="l",col="Red",)
plot(sent, type="l",col="Red")
sent
plot(1:100, sent, type="l",col="Red")
length(sent)
sprob <- prop.table(exp(forward(hmm, observation[1:100])),2)
sent <- apply(X = sprob, MARGIN = 2, FUN = entropy.empirical)
plot(1:100, sent, type="l",col="Red")
plot(1:100, sent, type="l",col="Red")
legend(1,1.6,"smoothing")
plot(1:100, sent, type="l",col="Red")
legend(1,1.6,"smoothing",lty=1)
plot(1:100, sent, type="l",col="Red")
legend(1,1.6,"smoothing",lty=1, col="Red")
seq(1,100,20)
############### lab1 #####################
knitr::opts_chunk$set(echo = TRUE ,out.height = "200px")
library(bnlearn)
# BiocManager::install("RBGL")
library(gRain)
############### lab1q1 #####################
rm(list=ls())
set.seed(12345)
data("asia")
nodes <- colnames(asia)
nodes
scores <- c("loglik","aic","bic","bdla","bdj","bde","bds","mbde")
rr <- seq(1,100,20)  # number of restart
iss <- seq(1,10,5)    # set to a very small value to reduce the
# relative weight of the prior distribution
min.score <- -999999
best.i <- 0
best.j <- 0
best.k <- 0
for (i in 1:length(scores)) {
for (j in 1:length(rr)) {
if(i<6){
score <- bnlearn::score(hc(asia, score = scores[i],
restart = rr[j]), asia)
if(score>min.score){
min.score <- score
best.i <- i
best.j <- j
}
}
else{
for(k in 1:length(iss)){
score <- bnlearn::score(hc(asia, score = scores[i],
restart = rr[j],iss=iss[k]), asia)
if(score>min.score){
min.score <- score
best.i <- i
best.j <- j
best.k <- k
}
}
}
}
}
cat("minimal scores: ",min.score,"\n")
cat("score function: ",scores[best.i],"\n")
cat("restart number: ",rr[best.j],"\n")
cat("imaginary sample size: ",best.k,"\n")
set.seed(54321)
mdl1a <- hc(asia, score = "bde")
score(mdl1a, asia)
set.seed(54321)
mdl1b <- hc(asia, score = "bde", restart = 100)
score(mdl1b, asia)
all.equal(mdl1a, mdl1b)
plot(mdl1a)
plot(mdl1b)
cp1a <- cpdag(mdl1a)
cp1b <- cpdag(mdl1b)
all.equal(cp1a, cp1b)
plot(cp1a)
